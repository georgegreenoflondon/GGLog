{"name":"DragonLog","tagline":"A simple swift logging kit.","body":"### Welcome to DragonLog\r\nThis project is a very simple swift logging kit. It is designed to replace `println` and give you the extra power of adding tags to your logs. Check out the examples below to see how useful this can be!\r\n\r\n### To use\r\nTo use DragonLog in your own project simply download the `DragonLog.swift` file and include it in your project. That's it, you're good to go!\r\n\r\n### Most simple use\r\nJust a simple print to the console.\r\n\r\n    DRLogger.logIt(\"This is a log!\")\r\n    => DRLog: This is a log!\r\n\r\nThis method will accept any object that conforms to the `Printable` protocol and log it to the console.\r\n\r\n### Simple tags\r\nPrint an object with a specified tag.\r\n\r\n    DRLogger.logIt(\"This is a log, with a custom tag!\", tag: \"MyLogs\")\r\n    => MyLogs: This is a log, with a custom tag!\r\n\r\nWhen printed to the console, the log will be prefixed with the tag, this makes it nice and simple to search for specific logs in the console.\r\n\r\n### The power of tags\r\nRemember all those times you've hit an issue with your code, added a few logs to see what's going on, and then had the nightmare of trying to find these new logs in amongst all the others that you have in your project? Perhaps not, but if you have... Check this out:\r\n\r\nSo we have all these logs in the app already, and perhaps quite a few more:\r\n\r\n    DRLogger.logIt(\"App launched\")\r\n    DRLogger.logIt(\"App is online!\")\r\n    DRLogger.logIt(\"App did something good!\")\r\n\r\nAnd then we add a new log to help debug this issue that we're having:\r\n\r\n    DRLogger.logIt(\"Hmmm, went down this code path...\", tag: \"Debug\")\r\n    => DRLog: App launched\r\n    => DRLog: App is online!\r\n    => DRLog: App did something good!\r\n    => Debug: Hmmm, went down this code path...\r\n\r\nAnd it's hard to find what we want in all of these logs, well not in this case, but imagine that there are loads more. All you need to do, is pop this line:\r\n\r\n    DRLogger.soloTags([\"Debug\"])\r\n\r\ninto your `application:didFinishLaunchingWithOptions:`, and all of a sudden the log output of your app is:\r\n\r\n    => Debug: Hmmm, went down this code path...\r\n\r\nYou can very easily turn off all logs in your app except for the ones that are relevant to what you are debugging right now! Make sure you remember to configure the logger before you start making calls to log, only the calls to log after the config calls will be affected... obviously :P\r\n\r\n### Changing the status of a tag\r\nDragonLog lets you enable or disable tags in your project. Simply make a call to `setTag:enabled:` like so:\r\n\r\n    DRLogger.setTag(\"Debug\", enabled: false)\r\n\r\nto change the state of a specific tag. If false is passed the logger will ignore any future calls to log with the specified tag, and if true is passed a tag will be re-enabled. By default all tags are enabled and will be printed.\r\n\r\n### Solo tags\r\n\r\nSo as we saw before you can use the `soloTags:` method as follows:\r\n\r\n    DRLogger.soloTags([\"Debug\"])\r\n\r\nThis takes a list of tags, and basically tells the logger that it should only print logs with the tags specified in this call. It basically disables all logs with a tag that is not in this list.\r\n\r\n### Muting the logger\r\nIf you want to stop your app from logging altogether, perhaps when you release your app, simply call the mute method as follows:\r\n\r\n    DRLogger.mute()\r\n\r\nand the logger will ignore calls to log.\r\n\r\n### Log schemes\r\nThe DragonLog kit provides one additional class to help configure your logs, `DRLogScheme`. A log scheme object can be created with one of the following class methods:\r\n\r\n    class func disabledTagsScheme(disabledTags: [String]) -> DRLogScheme\r\n    class func soloTagsScheme(soloTags: [String]) -> DRLogScheme\r\n    class func muteScheme() -> DRLogScheme\r\n\r\nYou may notice the similarity between these methods and the sections above. You can then load a log scheme into the logger like this:\r\n\r\n    let scheme = DRLogScheme.soloTagsScheme([\"Debug\"])\r\n    DRLogger.loadLogScheme(scheme)\r\n\r\nand the logger will be configured, in this case it will now only print calls to log made for the tag \"Debug\". You can use this to, for example, create a log scheme for each of your build schemes so that when you do a debug/release build the logger automatically picks up the relevant scheme. Also, just switching between different sets of logs when debugging can be quite useful.\r\n\r\n### More info\r\nFor more info, see the documentation comments in the DragonLog.swift file, and the source code itself. You can for example, change the default tag used when using the simple log method, log to standard error (not much use for iOS) instead of standard out, or even log to your own custom NSFileHandle.\r\n\r\n### Any queries?\r\nIf you have any troubles with DragonLogs, or feature requests, feel free to leave a comment or send me an [email](mailto:george+dragonlogs@theswift.guru).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}